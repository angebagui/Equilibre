{
  "name": "Equilibre Orm",
  "tagline": "Reactive database connection for Android based on ORMLite.",
  "body": "Connect to your database reactively with Equilibre Orm in Android. Write my same code with my Ormlite every time is not possible, so i decided to develop that library. And just create my different POJO classes that extends to one class with reactive methods. I have meet Parse Android SDK and Retrofit after, so i have imagined a combination of HTTP client, ORM and Reactive Programming in one library.\r\n\r\n### Before\r\nYou have to know this project is beta version. This version is a game version. Type-safe HTTP client for Android will be included in the release version. Equilibre Orm is inspired from Parse SDK and reactive programming.\r\n\r\n### Download\r\nThe source code of Equilibre Orm is <a href=\"https://github.com/angebagui/equilibre-orm\">available on Github</a>\r\n\r\nIn your dependences\r\n```groovy\r\ndependencies {\r\n  compile 'io.github.angebagui.equilibre:equilibre-orm:1.0.1'\r\n}\r\n```\r\n\r\nJavadoc\r\n=======\r\nYou can have the javadoc here:\r\n\r\n       http://angebagui.github.io/equilibre-orm/javadoc/\r\n\r\n\r\nUsage\r\n=======================\r\n\r\nEquilibre required that you created a subclass that extends to Application and your override the onCreate method like this:\r\n```java\r\npublic class MyApp extends Application {\r\n    private static String DATABASE_NAME = \"dummyexampledb.db\";\r\n    private static int DATABASE_VERSION = 1;\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n\r\n        //Equilibe need to be initialzed\r\n        Equilibre.initialize(getApplicationContext(), DATABASE_NAME, DATABASE_VERSION);\r\n        //Register our differentes models\r\n        EquilibreObject.registerSubclass(Dummy.class);\r\n\r\n        // DON'T FORGET TO ADD MyApp in The MANIFEST OF YOUR PROJECT\r\n    }\r\n}\r\n```\r\n\r\nHere we have created a pojo named Dummy which extends to EquilibleObject. Like this\r\n```java\r\n//Required the use that annotation with the name the table\r\n@EquilibreClassName(\"Dummy\")\r\npublic class Dummy extends EquilibreObject<Integer> { \r\n   \r\n\r\n    @DatabaseField(id = true, generatedId = true)\r\n    public Integer id;\r\n    @DatabaseField //Equilibre rely on OrmLite to don't rebuild the wheel. Use Ormlite annotation to specify your column\r\n    public String name;\r\n    \r\n\r\n\r\n    /**\r\n     * It's required to create this default constructor\r\n     */\r\n    public Dummy(){\r\n\r\n    }\r\n\r\n    /**\r\n     * It's required to write this method to build beautiful query with Equilibre\r\n     * @return\r\n     */\r\n    public static EquilibreQuery<Dummy, Integer> getQuery(){\r\n        return EquilibreQuery.getQuery(Dummy.class);\r\n    }\r\n}\r\n```\r\nNow everywhere in your code you came persiste data like this:\r\n```java\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n      \r\n        //Get our EquilibreQuery for request\r\n        EquilibreQuery<Dummy> query = Dummy.getQuery();\r\n        //make a request\r\n        query.findInBackground(new FindCallback<Dummy>(){\r\n            @Override\r\n            public void done(List<Dummy> dummies, EquilibreException e) {\r\n                if (e==null){ //it's good\r\n                    Log.d(\"Ange BAGUI\", \"DEBUG ===> Dummies available: \"+dummies+\" size: \"+dummies.size()+\" <<<==== \"+ new Date());\r\n                }else{\r\n                    // nothing to do\r\n                    Log.e(\"Ange BAGUI\", \"ERROR ===> \"+e+\" <<<==== \"+ new Date());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n```\r\n\r\n### Save data Asynchronously\r\n\r\n```java\r\n//we don't have data so we create\r\n        Dummy dummy1 = new Dummy(\"Ange\");\r\n        Dummy dummy2 = new Dummy(\"Bagui\");\r\n        Dummy dummy3 = new Dummy(\"Cyrille\");\r\n        Dummy dummy4 = new Dummy(\"Gupie\");\r\n\r\n        //Create a list\r\n        List<Dummy> dummies = new ArrayList<>();\r\n\r\n        //Add these to the list\r\n        dummies.add(dummy1);\r\n        dummies.add(dummy2);\r\n        dummies.add(dummy3);\r\n        dummies.add(dummy4);\r\n\r\n        Log.d(\"Ange BAGUI\", \"DEBUG ===> Dummies created \" + dummies + \" <<<==== \" + new Date());\r\n\r\n        Dummy.saveAllInBackground(dummies, new SaveCallback(){\r\n            @Override\r\n            public void done(EquilibreException e) {\r\n                if(e==null){\r\n                    Log.d(\"Ange BAGUI\", \"DEBUG ===> Dummies saved successfully <<<==== \" + new Date());\r\n                }else{\r\n                   //something is wrong\r\n                    Log.e(\"Ange BAGUI\", \"ERROR ===> \"+e+\" <<<==== \" + new Date());\r\n                }\r\n            }\r\n        });\r\n```\r\n\r\n### Licences\r\n=======\r\n    Copyright 2016 Ange Bagui.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n### Contributing\r\nIf you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request.\r\n\r\n### Contact\r\nTwitter : <a href=\"https://twitter.com/angebagui\">@angebagui</a><br/>\r\nGoogle+ : <a href=\"https://plus.google.com/u/0/+AngeBagui\">+AngeBagui</a><br/>\r\nEmail   : angebagui@gmail.com\r\n",
  "google": "UA-80524592-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}